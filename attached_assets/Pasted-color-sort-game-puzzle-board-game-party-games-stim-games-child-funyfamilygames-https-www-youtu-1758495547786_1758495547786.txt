color sort game puzzle


board game party games stim games child funyfamilygames


https://www.youtube.com/shorts/hFKLdiLEwcc
https://www.youtube.com/shorts/Bobkz3HfuTM
https://www.youtube.com/shorts/gGSa9lUODkI
https://www.youtube.com/shorts/eRU-Vl4tX-c
https://www.youtube.com/shorts/1lx4ado-wno
https://www.youtube.com/shorts/RarRHasMlN0

https://www.youtube.com/shorts/Wf0IkJMa2bc
https://www.youtube.com/shorts/LCeikHGwAtA
https://www.youtube.com/shorts/VfsTAK6Au5g






Objectif : Générer une application web responsive nommée "FoncierMap" avec un backend Python Flask et une base de données PostgreSQL.

Rôle : Tu es un développeur Full-Stack expert, spécialisé dans la création d'applications web modernes, sécurisées et ergonomiques avec Flask et les technologies web de pointe.

1. Principes Directeurs & Philosophie de Conception

Mobile-First : La conception doit prioriser l'expérience sur mobile. Sur les écrans de bureau, l'interface s'adaptera pour utiliser l'espace disponible.

Ergonomie et Simplicité : L'interface doit être intuitive, même pour un utilisateur peu familier avec la technologie. Utilise des icônes claires, des libellés simples et un parcours utilisateur logique.

Design Captivant : Crée une identité visuelle moderne et rassurante. Utilise une palette de couleurs inspirée du Bénin (par exemple : vert, jaune, rouge, avec beaucoup de blanc pour la clarté), une typographie lisible (comme "Poppins" ou "Inter" de Google Fonts) et des animations subtiles pour améliorer l'expérience.

Performance : Le code doit être optimisé pour un chargement rapide, même sur des connexions internet lentes.

LES USERS SImples n'ont pas besoin de se connecter avant de faire quoi que ce soir... a moins si c'est necessaire pour certaines choses
2. Stack Technique

Backend : Python 3.10+ avec le framework Flask.


PAS AUTH REPLIT STP - Utilise une auth from scratch .......



Base de Données : PostgreSQL. Utilise Flask-SQLAlchemy comme ORM pour gérer les modèles.

Frontend :

HTML5 / CSS3 / JavaScript (ES6+).

Utilise Tailwind CSS pour un design rapide et customisable.

Utilise Leaflet.js ou Mapbox GL JS pour la carte interactive.

Utilise Font Awesome ou Heroicons pour les icônes.

Authentification : Flask-Login pour la gestion des sessions utilisateur.

Dépendances : Fournis un fichier requirements.txt complet.

3. Structure du Projet (Arborescence des Fichiers)

Génère une structure de projet Flask modulaire et évolutive :

code
Code
download
content_copy
expand_less

/FoncierMap
|-- /app
|   |-- /static
|   |   |-- /css
|   |   |-- /js
|   |   |-- /img
|   |-- /templates
|   |   |-- /layouts
|   |   |-- /auth
|   |   |-- index.html
|   |   |-- dashboard.html
|   |   |-- map_view.html
|   |-- __init__.py
|   |-- models.py        # Modèles SQLAlchemy
|   |-- routes.py        # Routes Flask
|   |-- forms.py         # Formulaires Flask-WTF
|   |-- auth.py          # Routes d'authentification
|-- config.py            # Fichier de configuration
|-- run.py               # Point d'entrée de l'application
|-- requirements.txt
|-- .env                 # Pour les variables d'environnement
4. Modèles de Base de Données (PostgreSQL via models.py)

Crée les modèles SQLAlchemy suivants :

User :

id (Integer, Primary Key)

full_name (String)

email (String, Unique, Not Null)

password_hash (String, Not Null)

phone_number (String, Unique)

created_at (DateTime, default=now)

Parcel (Parcelle) :

id (Integer, Primary Key)

parcel_id_unique (String, Unique, Not Null) # Numéro unique de parcelle

owner_id (Integer, ForeignKey('user.id'))

geometry (JSONB ou PostGIS type) # Pour stocker les coordonnées GeoJSON du polygone

status (String, ex: "Vérifié", "En cours de traitement", "Non conforme")

address (String)

last_updated (DateTime)

Document :

id (Integer, Primary Key)

parcel_id (Integer, ForeignKey('parcel.id'))

user_id (Integer, ForeignKey('user.id'))

document_type (String, ex: "Titre Foncier", "Certificat de Vente")

file_path (String) # Chemin vers le fichier uploadé

ocr_status (String, ex: "En attente", "Traité", "Erreur")

is_compliant (Boolean, default=False)

upload_date (DateTime, default=now)

Transaction (pour simuler la Blockchain) :

id (Integer, Primary Key)

parcel_id (Integer, ForeignKey('parcel.id'))

transaction_type (String, ex: "Vente", "Achat", "Héritage")

previous_owner_id (Integer, ForeignKey('user.id'))

new_owner_id (Integer, ForeignKey('user.id'))

timestamp (DateTime, default=now)

transaction_hash (String) # Hash de la transaction

previous_hash (String) # Hash de la transaction précédente pour cette parcelle

5. Fonctionnalités et Pages à Générer
A. Interface Publique (Non connecté)

Page d'Accueil (index.html) :

Une grande phrase d'accroche : "FoncierMap : Votre parcelle à portée de main."

Une barre de recherche proéminente : "Entrez une adresse ou un numéro de parcelle".

Une carte interactive (Leaflet.js) occupant une grande partie de l'écran, affichant des parcelles fictives avec des couleurs différentes selon leur statut.

Des boutons clairs "Se Connecter" / "S'inscrire".

B. Authentification (/auth/)

Pages de connexion, d'inscription et de réinitialisation de mot de passe. Utilise Flask-WTF pour des formulaires sécurisés.

C. Espace Utilisateur (Connecté)

Layout Principal (layout.html) :

Desktop : Barre de navigation latérale.

Mobile : Barre de navigation en bas de l'écran avec 4 icônes :

Accueil/Dashboard

Carte

Mes Documents

Profil

Tableau de Bord (dashboard.html) :

Résumé des parcelles de l'utilisateur.

Notifications (ex: "Votre document a été validé").

Accès rapide pour "Ajouter une parcelle" ou "Uploader un document".

Page Carte Interactive (map_view.html) :

Affiche la carte centrée sur la localisation de l'utilisateur (si autorisée).

Met en surbrillance les parcelles de l'utilisateur.

Au clic sur une parcelle : une pop-up affiche le statut ("En règle"), le propriétaire (partiellement masqué pour la confidentialité) et un lien vers les détails.

Page de Détail d'une Parcelle :

Informations complètes de la parcelle.

Historique des Transactions (Blockchain) : Affiche la liste chronologique des transactions de manière claire et inviolable. Chaque bloc montre le type de transaction, la date, et les parties impliquées.

Gestion des Documents :

Interface pour uploader des documents (glisser-déposer).

Liste des documents soumis avec leur statut ("En cours de vérification par IA", "Conforme", "Rejeté").

Simulation OCR : Crée une route Flask /process-document/<doc_id> qui simule le traitement. Elle attend quelques secondes puis met à jour le statut du document (ocr_status et is_compliant) de manière aléatoire.

D. Chatbot IA

Intègre un bouton flottant en bas à droite sur toutes les pages.

Au clic, une fenêtre de chat s'ouvre.

Implémente une logique simple dans une route Flask (/chatbot-query) :

Si l'utilisateur demande "Comment enregistrer ma parcelle ?", le chatbot répond avec des étapes simples.

Si l'utilisateur demande "C'est quoi un titre foncier ?", le chatbot donne une définition vulgarisée.

Ajoute un sélecteur de langue (simulation) : [FR], [Fon], [Yoruba].

6. Instructions Finales

Génère le code fichier par fichier, en commençant par models.py, puis routes.py, et enfin les templates HTML.

Ajoute des commentaires dans le code Python pour expliquer les parties complexes (ex: logique de hachage pour la blockchain simulée).

Utilise des données fictives (seed data) pour peupler la base de données avec quelques utilisateurs et parcelles afin que l'application soit testable immédiatement.

Fournis un fichier README.md avec les instructions pour installer les dépendances, configurer la base de données PostgreSQL et lancer l'application.